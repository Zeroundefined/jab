#! /bin/bash

# functons for git

# sorted by strcmp of function name

# x

# xx

ga ()
{
    git add "$@"
}

gc ()
{
    local _storage=/tmp/fred.sh
	if [[ -z "$@" ]]
	then git commit --verbose
	else
        python -c "print 'git commit -m\"$*\"'" > $_storage
        bash $_storage
        cat $_storage
        rq $_storage
	fi
}

gs ()
{
	do_git_status "$@"
}

# xxx

gaa ()
{
    git add .
}

gac ()
{
    git add . ; gc "$@"
}

gcj ()
{
    local GIT="git -C $JAB"
	if [[ -z "$@" ]]
	then $GIT commit --all --verbose
	else
        python -c "print '$GIT commit -m\"$*\"'" > /tmp/fred.sh
        bash /tmp/fred.sh
	fi
}

ghi ()
{
    echo move to local 'TERM=xterm-256color  /usr/local/Cellar/ghi/0.9.3/bin/ghi "$@"'
}

gpp ()
{
    git pull --rebase
    git push
}

grs ()
{
    git rerere status
}

# xxxx
# xxxxx
# xxxxxx
# xxxxxxx

statvim ()
{
	local replacement="$1"
	shift
	if [[ -z "$1" ]]
	then
		do_git_stat | sed -e "s/^M/$replacement/" -e "s/^A/vim/" -e"s/^?/r/"
	else
		for file in "$@"
		do 
			do_git_stat $file | sed -e "s/^M/$replacement/" -e "s/^A/vim/"
		done
	fi | sort
}

# xxxxxxxxxxx

do_git_stat ()
{
	local __doc__="get the short status from git"
	if first_path "$@"
	then git status -s "$path"
	else echo \"$path\" is not a file, nor dir
	fi
}

# xxxxxxxxxxxxx

do_git_status ()
{
	local __doc__="get the full status from git"
	first_dir "$@"
	if [[ -n $dir && $dir != $PWD ]]
	then
		cd $dir
		git status $dir
		cd - > /dev/null
	else
		git status
	fi
}
