#! /bin/bash

# functons for subversion

# sorted by strcmp of function name

# x

# xx

gc ()
{
	if [[ -z "$@" ]]
	then git commit -a -v
	else git commit -v "$@"
	fi
}

gl ()
{
	git log "$@"
}

jb ()
{
	gtj | grep 'On.branch'
}

# xxx

gdc ()
{
	git difftool -y --extcmd=colordiff "$@"
}

gdh ()
{
	git difftool -y --extcmd="vim -d -o"  "$@"
}

gdp ()
{
	if [[ -x "$PYDIFF" ]]
	then git difftool -y --extcmd="$PYDIFF" "$@"
	else echo "\$PYDIFF ($PYDIFF) is not executable" >72
	fi
}

gdv ()
{
	git difftool -y --extcmd="vim -d -O"  "$@"
}

gtv ()
{
	do_git_stat "$@" | sed -e "s/^ M/gdv/" -e "s/^?? /vim /"
}

gtj ()
{
	do_git_status $JAB
}

# xxxxx
# xxxxxx
# xxxxxxx

statvim ()
{
	local replacement="$1"
	shift
	if [[ -z "$1" ]]
	then
		do_git_stat | sed -e "s/^M/$replacement/" -e "s/^A/vim/" -e"s/^?/r/"
	else
		for file in "$@"
		do 
			do_git_stat $file | sed -e "s/^M/$replacement/" -e "s/^A/vim/"
		done
	fi | sort
}

# xxxxxxxxxxx

do_git_stat ()
{
	local __doc__="get the short status from git"
	if first_path "$@"
	then git status -s "$path"
	else echo \"$path\" is not a file, nor dir
	fi
}

# xxxxxxxxxxxxx

do_git_status ()
{
	local __doc__="get the full status from git"
	first_dir "$@"
	if [[ -n $dir && $dir != $PWD ]]
	then
		cd $dir
		git status $dir
		cd - > /dev/null
	else
		git status
	fi
}
