#! /bin/bash

. $JAB/bin/first_dir

# functons for git

# sorted by strcmp of function name

# x

# xx

ga ()
{
    git add "$@"
}

gc ()
{
    local _storage=/tmp/gc.sh
	if [[ -z "$@" ]]
	then git commit --verbose
	else
        python -c "print 'git commit -m\"$*\"'" > $_storage
        _show_run_storage
	fi
}

gd ()
{
    git diff "$@"
}

gs ()
{
	do_git_status "$@"
}

# xxx

gaa ()
{
    ga .
}

gac ()
{
    local addable=.
    if [[ -e $1 ]]
    then
        addable=$1
        shift
    fi
    if ga $addable
    then gc "$@"
    fi
}

gai ()
{
    ga --interactive "$@"
}

gcj ()
{
    local _storage=/tmp/gcj.sh
    local GIT="git -C $JAB"
	if [[ -z "$@" ]]
	then $GIT commit --all --verbose
	else
        python -c "print '$GIT commit -m\"$*\"'" > $_storage
        _run_storage
	fi
}

gdi ()
{
    git di "$@"
}

gdv ()
{
    git dv "$@"
}

gpp ()
{
    git pull --rebase
    git push
}

grs ()
{
    git rerere status
}

gsd ()
{
    shift_dir "$@" && shift
    for f in $(git -C $dir status -s | grep "^ M" | cut -dM -f2)
    do
        git dv $f     
    done
    ADDED=$(git -C $dir status -s | grep "??" | cut -d' ' -f2)
    if [[ -n $ADDED ]]
    then v $ADDED
    fi
}

gsi ()
{
    shift_dir "$@" || shift
    for f in $(git -C $dir status -s | grep "^ M" | cut -dM -f2)
    do
        git di $f     
        read -e -n1 -p "a to add to staging area; i for add -i; c for commit; q to quit; <other> for next" answer
        [[ $answer =~ [qQ] ]] && return
        [[ $answer =~ [aA] ]] && ga $f
        [[ $answer =~ [iI] ]] && gai $f
        [[ $answer =~ [cC] ]] && gc
    done
    if [[ -n $ADDED ]]
    then vimcat $ADDED
    fi
}

# xxxx

gaic ()
{
    gai .; gc "$@"
}

# xxxxx
# xxxxxx
# xxxxxxx

statvim ()
{
	local replacement="$1"
	shift
	if [[ -z "$1" ]]
	then
		do_git_stat | sed -e "s/^M/$replacement/" -e "s/^A/vim/" -e"s/^?/r/"
	else
		for file in "$@"
		do 
			do_git_stat $file | sed -e "s/^M/$replacement/" -e "s/^A/vim/"
		done
	fi | sort
}

# xxxxxxxxxxxx

_run_storage ()
{
    bash $_storage
    rq $_storage
}

# xxxxxxxxxxxxx

_do_git_status ()
{
	local __doc__="get the full status from git"
	first_dir "$@"
	if [[ -n $dir && $dir != $PWD ]]
	then
		cd $dir
		git status $dir
		cd - > /dev/null
	else
		git status
	fi
}

# xxxxxxxxxxxxxxxxx

_show_run_storage ()
{
    cat $_storage
    _run_storage
}

