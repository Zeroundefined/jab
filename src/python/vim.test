The vim module
==============

    >>> import vim
    >>> print vim.__doc__
    Script to set up a call to vim

More modules for testing
------------------------

    >>> import os

Set up
------

    >>> vim.new_script()

Find files
----------

The command line to vim is going to be made up of filenames and options

    >>> vim.is_option('-d')
    True

Complete tab-completion
-----------------------

Tab completion tests depend on being in the right directory
    i.e. where we have a "vim.py to complete on
    >>> vim_here = 'vim.py' in os.listdir('.')
    >>> short_vim = vim_here and 'vim.' or 'vim.py'

The command line coming in may have been partially tab-completed
    typically looking like "vim."
        because there's more than one "vim.*" file here
        and bash's tab completion stops there
    But we often know which one to edit
    >>> vim.tab_complete(short_vim) == 'vim.py'
    True

Non-existent files do not get completed
    >>> vim.tab_complete('not_a_real_file.') == 'not_a_real_file.'
    True

No point in editting non-text files
    >>> vim.textify('vim.pyc') == 'vim.py'
    True

Do not re-edit
--------------

    >>> vim_py = vim.textify(vim.__file__)

Determine whether a file is being editted
    and whether it has any swap files
    >>> vimming_vim = no_print(vim.vimming, vim_py)
    >>> vim_swap_file = no_print(vim.has_swap_file, vim_py)
    >>> vimming_vim and vim_swap_file or True
    True

Quote strings
--------------

Then we need to quote individual files
    >>> vim.quote('xxx') == '"xxx"'
    True
    >>> vim.quote('x"xx') == """'x"xx'"""
    True
    >>> vim.quote("x'xx") == '''"x'xx"'''
    True
    >>> vim.quote("""x'x"x""") == '''"x'x\\"x"'''
    True

Special exemption - do not add extra quotes if it just looks like a string
    >>> vim.quote('"xxx"') == '"xxx"'
    True

Then to quote a list of them
    >>> vim.quotes(['x"xx', "x'xx"]) == ["""'x"xx'""", '''"x'xx"''']
    True

And the program can print that out
    >>> files, options = vim.interpret([
    ...     'a file.pyc', 'quote".txt', '+/sought'])
    >>> print vim._main_command('vim', files, options)
    vim "a file.py" 'quote".txt' -p +/"sought"


Exclude files which are being editted already
---------------------------------------------

This test will sometines be run from within vim
    And sometimes without

If within there should be a pid
    >>> pid, _ = vim.vimming_process(vim_py)

So this should be true
    >>> module_is_being_editted = bool(pid)

If without then there should be some edittable files in this list
    (If not editting it then it should be included)
    >>> module_is_edittable = bool(no_print(vim.vimmable_files, [vim_py]))

So one of these should always be true
    >>> module_is_being_editted or module_is_edittable
    True
