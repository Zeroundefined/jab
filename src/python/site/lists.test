the lists module
================

    >>> import lists

doublets gives the [prev, curr] for each element of a list
    >>> lists.doublets([0, 1, 2, 3, 4])
    [[None, 0], [0, 1], [1, 2], [2, 3], [3, 4]]

Like most list functions - works on strings as easily
    >>> lists.doublets('alan')
    [[None, 'a'], ['a', 'l'], ['l', 'a'], ['a', 'n']]

triplets gives the [prev, curr, next] for each element of a list
    >>> lists.triplets([0, 1, 2, 3, 4])
    [[None, 0, 1], [0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, None]]

    >>> def match(a, b): return not cmp(a, b)
    >>> lists.groups(match, [0, 1, 1, 3, 1])
    [[0], [1, 1], [3], [1]]

head_rest returns two values:
    the first element and the rest of the list
    >>> print lists.head_rest([1, 2, 3, 4])
    (1, [2, 3, 4])

before is the more general form
    It takes an index and returns everything before that, and the rest
    >>> print lists.before([3, 5, 7, 9, 1, -1], 3)
    ([3, 5, 7], [9, 1, -1])


