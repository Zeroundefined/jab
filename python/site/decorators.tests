The decorators module
=====================

	>>> from decorators import memoize

Decorating methods
------------------

Instead of using the decorator one can call it directly
	>>> def average(first, second):
	...     print 'calculating average of', first, 'and', second
	...     return (first + second) / 2
	>>> average = memoize(average)
	>>> average(5,3) == average(2,6) == average(5,3)
	calculating average of 5 and 3
	calculating average of 2 and 6
	True

Unusual arguments
-----------------

The memoizer handles arguments in a dictionary,
	which might give problems with two special cases:

It can handle methods which have no arguments
	>>> @memoize
	... def fred():
	...     print 'finding fred'
	...     return 'fred'
	>>> fred() == fred() == fred()
	finding fred
	True

And can handle mutable arguments, such as lists
	>>> @memoize
	... def get_average(numbers):
	...     print 'This is a list', numbers
	...     return sum(numbers) / len(numbers)
	>>> get_average([3, 4, 5]) == get_average([3, 4, 5]) == get_average([6, 4, 2])
	This is a list [3, 4, 5]
	This is a list [6, 4, 2]
	True

And can handle default arguments
	>>> @memoize
	... def hello(name='world'):
	...      print 'hello', name
	...      return name

	>>> hello('fred') == 'fred'
	hello fred
	True
	>>> hello('fred') == 'fred'
	True
	>>> hello() == 'world'
	hello world
	True
	>>> hello() == 'world'
	True

But cannot second guess defaults
	>>> hello('world') == 'world'
	hello world
	True


Bad invalidation
----------------

This is allowed
	>>> get_average.invalidate([3, 4, 5])

But these values were not previously used, so raise an error
	>>> get_average.invalidate([3, 5, 6])
	Traceback (most recent call last):
	...
	KeyError: 'Not prevously cached: get_average([3, 5, 6])'

Invalidation handles bad arguments, by just giving them back to you
	>>> get_average.invalidate([3, 4], more=3)
	Traceback (most recent call last):
	...
	KeyError: 'Not prevously cached: get_average([3, 4], more=3)'
	>>> get_average.invalidate(more=3)
	Traceback (most recent call last):
	...
	KeyError: 'Not prevously cached: get_average(more=3)'
