The analogy module
==================

	>>> import analogy

Dog food time
	>>> analogy_grammar = analogy.module_grammar(analogy)
	>>> string = analogy.string_to_list(analogy_grammar)

Our grammar starts off looking like this
	>>> print string
	is is a verb
	verb is a noun

Which is stored in a string
	>>> string
	<string 'is is a verb \nverb is a noun \n'>

Which is made up of letters and stuff
	>>> print string.to_str(0,3)
	[<lower 'i'>, <lower 's'>, <space ' '>]

Group them by their class
	And convert the groups to strings with plural names
	>>> lyst = analogy.lysted( string )
	>>> show( lyst )
	[<lowers 'is'>,
	 <spaces ' '>,
	 <lowers 'is'>,
	 <spaces ' '>,
	 <lowers 'a'>,
	 <spaces ' '>,
	 <lowers 'verb'>,
	 <spaces ' '>,
	 <eols '\n'>,
	 <lowers 'verb'>,
	 <spaces ' '>,
	 <lowers 'is'>,
	 <spaces ' '>,
	 <lowers 'a'>,
	 <spaces ' '>,
	 <lowers 'noun'>,
	 <spaces ' '>,
	 <eols '\n'>]

	>>> lyst = analogy.worded( lyst )
	>>> show( lyst )
	[<word 'is'>,
	 <word 'is'>,
	 <word 'a'>,
	 <word 'verb'>,
	 <eols '\n'>,
	 <word 'verb'>,
	 <word 'is'>,
	 <word 'a'>,
	 <word 'noun'>,
	 <eols '\n'>]

	>>> lyst = analogy.lysted( lyst )
	>>> show( lyst )
	[<words [<word 'is'>, <word 'is'>, <word 'a'>, <word 'verb'>]>,
	 <eols [<eols '\n'>]>,
	 <words [<word 'verb'>, <word 'is'>, <word 'a'>, <word 'noun'>]>,
	 <eols [<eols '\n'>]>]

	>>> lyst = analogy.sentenced( lyst )
	>>> show( lyst )
	[<sentence [<word 'is'>, <word 'is'>, <word 'a'>, <word 'verb'>]>,
	 <sentence [<word 'verb'>, <word 'is'>, <word 'a'>, <word 'noun'>]>]
