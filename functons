#! /bin/bash

# Called functons because "functions" is ... something else

# sorted by strcmp of function name

# x

c ()
{
	kd "$@"
	if [[ -f todo.txt ]]
	then
		todo_show
	fi
}

h()
{
	local lines=${1:-25}
	history | tail -n $lines
}

p ()
{
	local me=$USER
	local here=$(hostname -s)
	export PYTHON=${PYTHON-python}
	console_title_on "python@${here}" && \
		$PYTHON "$@" && \
		console_title_off "${me}@${here}"
}

w ()
{
	what "$@"
}

# xx

3d ()
{
	tree -d "$@" | less
}

IP ()
{
	for number in 172 192 100
	do
		if python $JAB/python/ifconfig.py $number
		then break
		fi
	done
}

aa ()
{
	Ack --all "$@"
}

ac ()
{
	Ack --code "$@"
}

ae ()
{
	Ack --erl "$@"
}

ag ()
{
	alias | grep "$@"
}

ai ()
{ 
    local sought="$@";
    ack --pyt "(import.*$sought|$sought import)"
}

al ()
{
	Ack --html "$@"
}

ap ()
{
	Ack --python "$@"
}

at ()
{
	Ack --pyt "$@"
}

av ()
{
	vack "$@"
}

cl ()
{
	c $LOGS
}

cv ()
{
	kd $1
	fim $(basename $1)
}

gg ()
{
	local readme="show grep results as vim commands"
	sought="$1"
	shift
	grep "$sought" "$@" | sed -e "s/^/vim /" -e "s|:.*| +/\"$sought\"|" | uniq
}

gp ()
{
	local __doc__="grep in python files under here, show results as vim commands"
	sought=$1
	shift
	seek=${sought//\\/\\\\}
	find . -name "*.py" -exec grep -l "$sought" {} \;  | sed -e "s:\(.*\):vim \1 +/\"$seek\":" | sort | uniq
}

gh ()
{
	local __doc__="show stuff from history"
	history | grep -v "\<\(history\|gh\)\>" | grep --color "$@"
}

gv ()
{
	gvim "$@"
}

hh ()
{
	history -n
}

hv ()
{
	history | vim - +
}

ky ()
{
	if [[ -z "$1" ]]
	then
		cd $PYTHON_HOME
	else
		kd "$@" > /dev/null
	fi
	y
}

pi ()
{
	if [[ $(ipython --help | grep no.*confirm) == "--no-confirm-exit" ]]
	then ipython --no-confirm-exit "$@"
	else ipython -noconfirm_exit "$@"
	fi
}

py ()
{
	if [[ -z "$@" ]]
	then
		python2.7
	else
		script=${1/%./.py}
		shift
		python $script "$@"
	fi
}

ra ()
{
	run_as abrogan "$@"
}

rb ()
{
	run_as builder "$@"
}

rf ()
{
	PYTHON_SCRIPT=$JAB/python/rf.py
	python $PYTHON_SCRIPT "$@"
}

ru ()
{
# do da root root route, do da ru !
	if [ -z "$@" ]
	then 
		SUDO
	else
		sudo "$@"
	fi
}

sk ()
{
	cp $1 ${1}.keep
	svn revert $1
	ls -l $1*
}

sv ()
{
	if [[ -n "$@" ]]
	then
		svn revert "$@"
	else
		svn revert *
	fi
}

uj ()
{
# update $JAB from the repository
	if [[ $(svn up $JAB | grep -v "At revision" | wc -l) != "0" ]]
	then
		BACK=$(pwd)
		if [[ $BACK != "$HOME/.jab" ]]
		then
			cd $JAB
			. bashrc
			cd $BACK
		else
			. bashrc
		fi
	fi
}

ut ()
{
	if [[ -f $HOME/bin/upTrackers ]]
	then
		sh $HOME/bin/upTrackers
	elif [[ $(hostname) == "ie-build-1" ]]
	then
		sudo su - builder -c "sh ~/bin/upTrackers"
	else
		ssh builder@ie-build-1 "sh ~/bin/upTrackers"
	fi
}

hd ()
{
	if [[ -n "$3" ]]
	then vim_diff "$1" "$2" "$3" -o
	else vim_diff "$1" "$2" -o
	fi
}

va ()
{
	_edit_jab aliases
}

vb ()
{
	_edit_jab bashrc
}

vd ()
{
	if [[ -n "$3" ]]
	then vim_diff "$1" "$2" "$3" -O
	else vim_diff "$1" "$2" -O
	fi
}

ve ()
{
	_edit_jab environ
}

vf ()
{
	_edit_jab functons
}

vh ()
{
	v ~/.bash_history +
}

vp ()
{
	_edit_jab prompt "$@"
}

vr ()
{
	set -x
	if [[ -n $1 && -f $1 ]]
	then
		filename=$1
	elif [[ -f errors.err ]]
	then
		echo "filename = ./errors.err"
		filename=./errors.err
	elif [[ -f ~/errors.err ]]
	then
		echo "filename = ${HOME}/errors.err"
		filename=${HOME}/errors.err
	elif [[ -f /tmp/errors.err ]]
	then
		echo "filename = /tmp/errors.err"
		filename=/tmp/errors.err
	fi
	vim -c "call ReadTraceback(\"$filename\")"
	set +x
}

vt ()
{
	first_dir "$@"
	v -p "$dir"/*.txt
}

vv ()
{
	v $JAB/bin/fim
}

zm ()
{
	du -cms $1 | sort -n | sed -e "s/      / M     /g"
}

# xxx

Ack ()
{
	$(python $JAB/python/ack_vack.py "$@")
}

aaa ()
{
	Ack --nojunk "$@"
}

aav ()
{
	vack --all "$@"
}

acv ()
{
	vack --code "$@"
}

aev ()
{
	vack --erl "$@"
}

alv ()
{
	vack --html "$@"
}

apv ()
{
	vack --python "$@"
}

atv ()
{
	vack --pyt "$@"
}

awv ()
{
	vack -w "$@"
}

aiv ()
{ 
    local sought="$@";
    vack --pyt "(import.*$sought|$sought import)"
}


aiw ()
{ 
    local sought="$@";
    ack --pyt "(import.*\b$sought\b|\b$sought\b import)"
}


ash ()
{
	Ack --shell "$@"
}

cff ()
{
	if [[ ! -d fred ]]
	then
		if [[ -e fred ]]
		then rm -f fred
		fi
		mkdir fred
	fi
	cd fred
}


cls ()
{
# clean, clear, ls
	rf -q
	clear
	if [ -z "$@" ]
	then
	    ls -d $(pwd)
	    echo
	fi
	ls "$@"
}

dev ()
{
	if [[ -d ~/dev ]]
	then
		echo ~/dev exists
		echo 
		here=$PWD
		cd ~/dev
		ls
		cd $here
		echo You may wish to try
		echo "    mv ~/dev/* ~/src; rm -rf ~/dev"
	fi
	[[ ! -d ~/src ]] && mkdir ~/src
	c ~/src "$@"
	ls
}

fgp ()
{
	fgv *.py "$@"
}

fgt ()
{
	fgv *.test *.tests "$@"
}

fsh ()
{
# run fred by his extension
	if [ -f fred.sh ]
	then
		bash fred.sh "$@"
	elif [ -f fred.py ]
	then
		p fred.py "$@"
	elif [ -f "fred.test" ]
	then
		try "fred.test" "$@"
	elif [ -f fred.c ]
	then
		/bin/rm -vf a.out
		gcc fred.c
		if [ -f a.out ]
		then
			./a.out
		fi
	else
		bash fred "$@"
	fi
}

fpy ()
{
# run fred.py if fred.sh exists
	if [ -f fred.py ]
	then
		p fred.py "$@"
	fi
}

jj1 ()
{
	ssj abrogan ie-build-1.altobridge.com
} 

jj2 ()
{
	ssj abrogan ie-build-2.altobridge.com
} 

jj3 ()
{
	ssj abrogan ie-build-3.altobridge.com
} 

jja ()
{
	ssj abrogan jab-track-1.altobridge.com
} 

jjb ()
{
	sst builder ie-build-1.altobridge.com
} 

jjd ()
{
	ssj jab abrogan-dev.altobridge.com
} 

jjj ()
{
# ssh back to the jab.ook (which is my laptop
# it goes by different hostnames, try in order of probablity
	local jjj_host=
	if ping -c 1 -w 1 jab.ook >/dev/null 2>&1
	then
		jjj_host=jab.ook
	elif ping -c 1 -w 1 dhcp92.altobridge.com >/dev/null 2>&1
	then
		jjj_host=dhcp92.altobridge.com
	elif ping -c 1 -w 1 172.16.1.92 >/dev/null 2>&1
	then
		jjj_host=172.16.1.92
	fi
	if [[ -z $jjj_host ]]
	then
		echo Could not ping jab.ook, dhcp92.altobridge.com, 172.16.1.92
	else
		ssj jab $jjj_host
	fi
}


jjk ()
{
	ssj jab jab-track-1.altobridge.com
} 

jjl ()
{
	ssj albrogan abrogan.altobridge.com
} 

jjp ()
{
	ssj root ie-protex-1.altobridge.com
} 

jjr ()
{
	ssj jab abrogan-run.altobridge.com
} 

jjt ()
{
	ssj abrogan ie-track-1.altobridge.com
} 

jju ()
{
	ssj abrogan abrogan1304.altobridge.com
}

jjy ()
{
	ky $JAB/python "$@"
}

jjz ()
{
	sst abrogan r9dev1.altobridge.com
} 

jjZ ()
{
	sst abrogan sz-build-1.altobridge.com
}

. $JAB/bin/first_dir

llt ()
{
	first_dir "$@"
	l --color=always -lhtr "$dir" | less -R -m -N +G
}

lly ()
{
	first_dir "$@"
	reset=$(shopt -p dotglob)
	shopt -s dotglob
	ls -lhtr "$dir"/*.tests
	echo
	ls -lhtr "$dir"/*.test
	echo
	ls -lhtr "$dir"/*.py
	$reset
}

lyy ()
{
	reset=$(shopt -p dotglob)
	shopt -s dotglob
	ls -xd $(ls -F |grep \/$)
	echo
	ls -xhtr *.tests 2>/dev/null
	echo
	ls -xhtr *.test 2>/dev/null
	echo
	ls -xhtr *.py 2>/dev/null
	$reset
}

rff ()
{
	r fred
	r fred.*
}

rfq ()
{
	rq fred
	rq fred.*
}

rq. ()
{
	/bin/rm -rf ./*
}

scd ()
{
	svn diff --diff-cmd colordiff "$@"
}

shd ()
{
	svn_diff horizontal "$@"
}

svd ()
{
	svn_diff vertical "$@"
}

unalias try > /dev/null 2>&1
try ()
{
	TRY=$JAB/python/testing/try.py
	test -f ./try.py && TRY=./try.py
	python $TRY "$@"
}

vai ()
{ 
    aiv "$@"
}


vla ()
{
	_edit_locals aliases
}

vlb ()
{
	_edit_locals bashrc
}

vle ()
{
	_edit_locals environ
}

vlf ()
{
	_edit_locals functons
}

vlp ()
{
	_edit_locals prompt
}

vpe ()
{
	v $JAB/python-environ
	spe
}


vff ()
{
	FRED=
	found_fred=0
	test -f fred && FRED=fred
	if [[ -n $FRED ]]
	then
		found_fred=1
	fi
	found_wild=0
	for f in fred*[^~]
	do
		test -f $f && found_wild=1
	done
	if [[ $found_fred == 1 && $found_wild == 1 ]]
	then 
		v -p fred fred*[^~]
	elif [[ $found_wild == 1 ]]
	then 
		v -p fred*[^~] 
	else
		v fred
	fi
}

wat ()
{
	vat $(which $1)
}

# xxxx

aaav ()
{
	vack --nojunk "$@"
}

cocn ()
{
	svn co -N $1
	cd ${1##*/}
}

cocq ()
{
	svn co -q $1
	cd ${1##*/}
}

dark ()
{
	svn revert -q $JAB/vim/vimrc
}

down ()
{
	c ~/Download* "$@"
	ls -alhtr
}

fgpp ()
{
	fgv *.py *.test *.tests "$@"
}

jjya ()
{
	jjy alanology
}

jjys ()
{
	jjy site
}

mkcd () 
{ 
    local __doc__='make a directory and start using it';
    mkdir -p "$@" && cd "$@"
}

rq.. ()
{
	local directory_here=$(basename "$(pwd)")
	cd ..
	/bin/rm -rf "$directory_here"
}

stat ()
{
	if [[ -z "$1" ]]
	then
		rf -q
		do_stat
	else
		for file in "$@"
		do 
			do_stat $file
		done
	fi
}

SUDO ()
{
	if [[ -n $1 ]]
	then
		user="-u $1"
		you_sir="$1"
	else
		user=
		you_sir=root
	fi
	me=$USER
	here=$(hostname -s)
	console_title_on "${you_sir}@${here}" && \
		sudo -i $user && \
		console_title_off "${me}@${here}"
}

dicp ()
{
	COMMAND_FOR_SAME_FILES=cp
	dixx "$1" "$2"
}

dihh ()
{
	COMMAND_FOR_SAME_FILES=hd
	dixx "$@"
}

divv ()
{
	COMMAND_FOR_SAME_FILES=vd
	dixx "$@"
}

dixx ()
{
	source_dir="$1"
	destination_dir="$2"
	local number_in_both=$(_divv_get_difference | grep Files | wc -l)
	if [[ $number_in_both -gt 0 ]]
	then
		echo
		echo "# Files 1 and 2 differ"
		_divv_get_difference | grep Files | sed -e "s/Files/$COMMAND_FOR_SAME_FILES/" -e "s/ and / /" -e "s/differ//"
	fi
	local number_in_source=$(_divv_get_difference | grep "Only in $source_dir" | wc -l)
	if [[ $number_in_source -gt 0 ]]
	then
		echo
		echo "Only in $source_dir"
		_divv_get_difference | grep "Only in $source_dir" | sed -e "s/Only in/vim /" -e "s|: |/|"
	fi
	local number_in_destination=$(_divv_get_difference | grep "Only in $destination_dir" | wc -l)
	if [[ $number_in_destination -gt 0 ]]
	then
		echo
		echo "Only in $destination_dir"
		_divv_get_difference | grep "Only in $destination_dir" | sed -e "s/Only in/vim /" -e "s|: |/|"
	fi
}

vvvb ()
{
	v $JAB/vim/ftplugin/sh.vim
}

vvvg ()
{
	gv $JAB/vim/gvimrc
}

vvvp ()
{
	v $JAB/vim/ftplugin/python
}

vvvv ()
{
	v $JAB/vim/vimrc
}

vvvy ()
{
	v $JAB/vim/ftplugin/python/jab.vim
}

# xxxxx

build ()
{
	if [[ $USER == "jab" ]]
	then
		if [[ -n "$1" ]]
		then
			user=abrogan
		else
			user=builder
		fi
	else
		user=$USER
	fi
	if [[ -n "$1" && "$1" == "2" ]]
	then
		ssh $user@ie-build-2
	elif [[ "$HOSTNAME" == "ie-build-1" ]]
	then
		ssh $user@ie-build-2
	else
		ssh $user@ie-build-1
	fi
}

clean ()
{
	rf -q "$@"
}

kodos ()
{
	pushd ~/bin/kodos-2.4.9/ >/dev/null
	/usr/bin/python kodos.py &
	popd >/dev/null
}

named ()
{
	dir=
	if first_dir $1
	then shift
	fi
	find $dir -name "$@"
}

vfile ()
{
	$(echo "$@" | sed -e"s/up to //" -e"s/^File/fim/" | sed -e"s/, line \([0-9]*\).*/ +\1/" -e"s/\.test +\([0-9]*\)/.py -c :tabnext|\1/")
}

# xxxxx

# xxxxxx

bright ()
{
	sed -i -e/color/d ~/.vimrc
}

revert ()
{
	if [[ -n "$1" ]]
	then
		cp $1 $1.changed
	fi
	svn revert $1
}

run_as ()
{
	username=$1
	shift
	if [[ -n "$1" ]]
	then 
		sudo -u $username "$@"
	else
		SUDO $username
	fi
}

# xxxxxxx

cleaner ()
{
	rf -qr "$@"
}

do_stat ()
{
	test -n "$1" && path="$1" || path="."
	if [[ -f "$path" || -d "$path" ]]
	then
		if svn info "$path" > /dev/null
		then svn stat "$path"
		fi
	else echo \"$path\" is not a file, nor dir
	fi
}

statvim ()
{
	local replacement="$1"
	shift
	if [[ -z "$1" ]]
	then
		do_stat | sed -e "s/^M/$replacement/" -e "s/^A/vim/" -e"s/^?/r/"
	else
		for file in "$@"
		do 
			do_stat $file | sed -e "s/^M/$replacement/" -e "s/^A/vim/"
		done
	fi | sort
}

svn_log ()
{
	if [ -n "$1" ]
	then
		if [[ -f $1 || -d $1 ]]
		then
			path=$1
			shift 
		fi
	else
		path="."
	fi
	local limit=${1-10}
	svn log -l $limit $path
}

svn_url ()
{
	test -n "$1" && dir=$1 || dir="."
	local URL=$(svn info $dir | grep URL)
	echo $URL
	SVN_URL=$(echo $URL| sed -e s/[^:]*://)
}

# xxxxxxxx

cleanest ()
{
	clean -pqr "$@"
}

svn_info ()
{
	test -n "$1" && dir=$1 || dir="."
	svn info $dir 
}

# xxxxxxxxx

svn_issue ()
{
	svn log "$@" | grep -i "^issue" | head
}

todo_edit ()
{
	local todo_txt="$JAB_TODO"
	if [[ -f todo.txt ]]
	then todo_txt=todo.txt
	fi
	v $todo_txt
	svn ci -m'more stuff to be done' "$JAB_TODO"
}

todo_show ()
{
	local todo_txt="$JAB_TODO"
	if [[ -f todo.txt ]]
	then todo_txt=todo.txt
	fi
	python2.7 $JAB/python/todo.py $todo_txt
}

# xxxxxxxxxx

to_source ()
{
	cd $SOURCE/"$@"
	clear
	ls
}

vim_diff ()
{
	one="$1"
	shift
	two="$1"
	shift
	options="$@"
	if ! diff -q "$one" "$two" >/dev/null
	then
		vim -d $options "$one" "$two"
	else
		echo same
	fi
}

# xxxxxxxxxx

to_release ()
{
	cd $RELEASES/"$@"
	clear
	ls
}

# xxxxxxxxxxx

# xxxxxxxxxxxx

blank_script ()
{
	test -f $1 && return
	echo "#! /bin/bash" > $1
	echo "" >> $1
}

# xxxxxxxxxxxxx

# xxxxxxxxxxxxxx

console_whoami ()
{
	console_title_on $USER@$(hostname -s)  
}

source_aliases ()
{
	local __doc__='source files which have aliases and remember the filenames'
	ALIASES="$ALIASES:$1"
	source $1
}

# xxxxxxxxxxxxxxx

# xxxxxxxxxxxxxxxx

console_title_on ()
{
	if [[ -n $TERM_PROGRAM && $TERM_PROGRAM == "iTerm.app" ]]
	then
		echo -e "\033]0;$1\007" # http://stackoverflow.com/a/6887306/500942
	elif env | grep -iq konsole 2>/dev/null
	then
		dcop $KONSOLE_DCOP_SESSION renameSession $1
	elif env | grep -iq gnome.terminal
	then
		echo -e "\033]0;$1\007" # http://askubuntu.com/a/22417/130752
	elif [[ -n $TERM && $TERM == "linux" ]]
	then
		echo -e "]1;$1"
	elif [[ $TERM == "xterm" ]]
	then
		echo -e "\033]0;$1\007" # http://askubuntu.com/a/22417/130752
	else
		echo "Title: $1"
	fi
}

# xxxxxxxxxxxxxxxxx

console_title_off ()
{
	if [[ -n $TERM_PROGRAM && $TERM_PROGRAM == "iTerm.app" ]]
	then
		echo -e "]0;$1"
	elif env | grep -iq konsole 2>/dev/null
	then
		dcop $KONSOLE_DCOP_SESSION renameSession $1
	elif env | grep -iq gnome.terminal
	then
		echo -e "\033]0;$1\007" # http://askubuntu.com/a/22417/130752
	elif [[ -n $TERM && $TERM == "linux" ]]
	then
		echo -e "]1;$1"
	elif [[ $TERM == "xterm" ]]
	then
		echo -e "\033]0;$1\007" # http://askubuntu.com/a/22417/130752
	else
		echo "Title: $1"
	fi
}

# _xxxxxxxxxxxxxxxxxxx
# functions starting with an underscore are intended for use within this file only

_edit_source ()
{
	local filepath=$1
	shift
	blank_script $filepath
	$EDITOR $filepath
	if echo $filepath | grep -q alias
	then
		source_aliases $filepath
	else
		source_file $filepath "$@"
	fi
}
	
_edit_jab ()
{
	if [[ -z $JAB ]]
	then
		echo \$JAB is empty >&2
	else
		test -d $JAB || mkdir -p $JAB
		local filepath=$JAB/$1
		shift
		_edit_source $filepath "$@"
	fi
}

_edit_locals ()
{
	local local_dir=$JAB/local
	test -d $local_dir || mkdir -p $local_dir
	_edit_source $local_dir/$1
}
	
_divv_get_difference ()
{
	local source_gitignore=
	test -f "$source_dir/.gitignore" && source_gitignore="--exclude-from=$source_dir/.gitignore"
	local destination_gitignore=
	test -f "$destination_dir/.gitignore" && destination_gitignore="--exclude-from=$destination_dir/.gitignore"
	diff -q -r \
		--exclude=.svn \
		--exclude=.git \
		--exclude=.DS_Store \
		--exclude="*.fail" \
		--exclude="*.py[co]" \
		--exclude=tags \
		--exclude=".*sw[po]" \
		--exclude=tmp \
		--exclude="*~" \
		--exclude="*.beam" \
		--exclude="*.a" \
		--exclude="*.o" \
		--exclude=.gitignore \
		$source_gitignore \
		$destination_gitignore \
	"$source_dir" "$destination_dir" 2>/dev/null
}

