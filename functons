#! /bin/sh

# Called functons because "functions" is ... something else

# sorted by strcmp of function name

# x

p ()
{
	if [[ -n "$PYTHON" ]]
	then
		$PYTHON $*
	else
		python $*
	fi
}

# xx

ag ()
{
	alias | grep $*
}

cj ()
{
# commit jab
	svn ci $JAB -m"$*"
}

cl ()
{
	c $LOGS
}

cv ()
{
	kd $1
	fim `basename $1`
}

gg ()
{
	local readme="show grep results as vim commands"
	sought="$1"
	shift
	grep "$sought" $* | sed -e "s/^/vim /" -e "s|:.*| +/\"$sought\"|" | uniq
}

kd ()
{ 
# cd to filename as well as directory
	destination=`python $JAB/python/kd.py $* 2>&1`
	first_word=`echo "$destination" | head -n 1 | cut -d\   -f1`
	if [[ "x$first_word" == "xError" ]]
	then
		python $JAB/python/kd.py $*
	else
		if [[ $destination != $1 && $1 != "-" ]]
		then
			echo "cd $destination"
		fi
		cd "$destination"
	fi
}

ky ()
{
	if [[ -z "$1" ]]
	then
		cd $PYTHON_HOME
	else
		kd $* > /dev/null
	fi
	y
}

ra ()
{
	run_as abrogan $*
}

rb ()
{
	run_as builder $*
}

ru ()
{
# do da root root route, do da ru !
	if [ -z "$*" ]
	then 
		sudo -i
	else
		sudo $*
	fi
}

sk ()
{
	cp $1 ${1}.keep
	svn revert $1
	ls -l $1*
}

uj ()
{
# update $JAB from the repository
	if [[ `svn up $JAB | grep -v "At revision" | wc -l` != "0" ]]
	then
		BACK=`pwd`
		if [[ $BACK != "$HOME/.jab" ]]
		then
			cd $JAB
			. bashrc
			cd $BACK
		else
			. bashrc
		fi
	fi
}

ut ()
{
	if [[ -f $HOME/bin/upTrackers ]]
	then
		sh $HOME/bin/upTrackers
	elif [[ `hostname` == "ie-build-1" ]]
	then
		sudo su - builder -c "sh ~/bin/upTrackers"
	else
		ssh builder@ie-build-1 "sh ~/bin/upTrackers"
	fi
}

vd ()
{
	if diff -q $1 $1 >/dev/null 2>&1
	then
		vim -do $1 $2
	else
		echo same
	fi
}

zm ()
{
	du -cms $1 | sort -n | sed -e "s/      / M     /g"
}

# xxx

cls ()
{
# clean, clear, ls
	rf quietly
	clear
	if [ -z "$*" ]
	then
	    ls -d `pwd`
	    echo
	fi
	ls $*
}

fsh ()
{
# run fred by his extension
	if [ -f fred.sh ]
	then
		sh fred.sh $*
	elif [ -f fred.py ]
	then
		p fred.py $*
	elif [ -f "fred.test" ]
	then
		try "fred.test" $*
	elif [ -f fred.c ]
	then
		/bin/rm -vf a.out
		gcc fred.c
		if [ -f a.out ]
		then
			./a.out
		fi
	else
		sh fred $*
	fi
}

fpy ()
{
# run fred.py if fred.sh exists
	if [ -f fred.py ]
	then
		p fred.py $*
	fi
}

. $JAB/bin/first_dir

llt ()
{
	first_dir $*
	l --color=always -lhtr "$dir" | less -R -m -N +G
}

lly ()
{
	first_dir $*
	reset=$(shopt -p dotglob)
	shopt -s dotglob
	ls -lhtr "$dir"/*.tests
	echo
	ls -lhtr "$dir"/*.test
	echo
	ls -lhtr "$dir"/*.py
	$reset
}

lyy ()
{
	reset=$(shopt -p dotglob)
	shopt -s dotglob
	ls -xd $(ls -F |grep \/$)
	echo
	ls -xhtr *.tests 2>/dev/null
	echo
	ls -xhtr *.test 2>/dev/null
	echo
	ls -xhtr *.py 2>/dev/null
	$reset
}

unalias try > /dev/null 2>&1
try ()
{
	TRY=$JAB/python/testing/try.py
	test -f ./try.py && TRY=./try.py
	p $TRY $*
}

SSH ()
{
	you=$1
	me=$USER
	there=$2
	there_small=${there/.altobridge.com/}
	here=`hostname -s`
	echo -e "]1;$you@$there_small" && ssh $you@$there && echo -e "]0;$me@${here}"
}

vff ()
{
	FRED=
	found_fred=0
	test -f fred && FRED=fred
	if [[ -n $FRED ]]
	then
		found_fred=1
	fi
	found_wild=0
	for f in fred*[^~]
	do
		test -f $f && found_wild=1
	done
	if [[ $found_fred == 1 && $found_wild == 1 ]]
	then 
		v -p fred fred*[^~]
	elif [[ $found_wild == 1 ]]
	then 
		v -p fred*[^~] 
	else
		v fred
	fi
}

# xxxx

dark ()
{
	svn revert -q $JAB/vim/vimrc
}

stat ()
{
	if [[ -z "$1" ]]
	then
		clean quietly
		do_stat
	else
		for file in $*
		do 
			do_stat $file
		done
	fi
}

# xxxxx

build ()
{
	if [[ $USER == "jab" ]]
	then
		if [[ -n "$1" ]]
		then
			user=abrogan
		else
			user=builder
		fi
	else
		user=$USER
	fi
	if [[ -n "$1" && "$1" == "2" ]]
	then
		ssh $user@ie-build-2
	elif [[ "$HOSTNAME" == "ie-build-1" ]]
	then
		ssh $user@ie-build-2
	else
		ssh $user@ie-build-1
	fi
}

kodos ()
{
	pushd ~/bin/kodos-2.4.9/ >/dev/null
	/usr/bin/python kodos.py &
	popd >/dev/null
}

track ()
{
	if [ -d ~/alans_tests ]
	then
		cd ~/alans_tests
		try
	else
		ssh abrogan@ie-track-1 $*
	fi
}

vfile ()
{
	`echo "$*" | sed -e"s/up to //" -e"s/^File/fim/" | sed -e"s/, line \([0-9]*\).*/ +\1/" -e"s/\.test +\([0-9]*\)/.py -c :tabnext|\1/"`
}

which ()
{ 
	( alias; declare -f ) | \
		$WHICH --tty-only --read-alias --read-functions --show-tilde --show-dot $@
}

# xxxxx

# xxxxxx

bright ()
{
	sed -i -e/color/d ~/.vimrc
}

revert ()
{
	if [[ -n "$1" ]]
	then
		cp $1 $1.changed
	fi
	svn revert $1
}

run_as ()
{
	username=$1
	shift
	if [[ -n "$1" ]]
	then 
		sudo -u $username $*
	else
		sudo -i -u $username
	fi
}

# xxxxxxx

do_stat ()
{
	test -n "$1" && path=$1 || path="."
	if [[ -f $path || -d $path/.svn ]]
	then
		svn stat $path
	fi
}

statvim ()
{
	if [[ -z "$1" ]]
	then
		clean quietly
		do_stat | sed -e "s/^M/shd/" -e "s/^A/vim/" -e"s/^?/r/"
	else
		for file in $*
		do 
			do_stat $file | sed -e "s/^M/shd/" -e "s/^A/vim/"
		done
	fi | sort
}

svn_log ()
{
	if [ -n "$1" ]
	then
		if [[ -f $1 || -d $1 ]]
		then
			path=$1
			shift 
		fi
	else
		path="."
	fi
	svn log $path | head $*
}

svn_url ()
{
	test -n "$1" && dir=$1 || dir="."
	svn info $dir | grep URL
}

# xxxxxxxx

svn_diff () {
	dir=`dirname $2`
	file=`basename $2`
	pushd "$dir" > /dev/null 2>&1
	if [[ "$1" == "vimdiff -o" ]]
	then 
		exe="$EDITOR -do"
	elif [[ "$1" == vimdiff ]]
	then 
		exe="$EDITOR -d"
	elif [[ -f $1 ]]
	then 
		exe="$1"
	elif [[ -f /usr/bin/$1 ]]
	then
		exe=/usr/bin/$1
	elif [[ -f ~/bin/$1 ]]
	then
		exe=~/bin/$1
	fi
	$exe "$file" .svn/text-base/"$file".svn-base
	popd > /dev/null 2>&1
}

svn_info ()
{
	test -n "$1" && dir=$1 || dir="."
	svn info $dir 
}

# xxxxxxxxx

svn_issue ()
{
	svn log $* | grep -i "^issue" | head
}

# xxxxxxxxxx

to_source ()
{
	cd $SOURCE/$*
	clear
	ls
}

# xxxxxxxxxx

to_release ()
{
	cd $RELEASES/$*
	clear
	ls
}

# xxxxxxxxxxx

# xxxxxxxxxxxx

# xxxxxxxxxxxx

svn_log_issue ()
{
	if [ -n "$1" ]
	then
		if [[ -f $1 || -d $1 ]]
		then
			path=$1
			shift 
		fi
	else
		path="."
	fi
	if [[ -d /usr/local/trunk/trackers/ ]]
	then
		TRACKERS=/usr/local/trunk/trackers/
	elif [[ -d /mnt/source/amg/trunk/trackers ]]
	then
		TRACKERS=/mnt/source/amg/trunk/trackers
	else
		svn log $path | grep ^issue | cut -d\  -f2 | cut -d\: -f1 | sort | uniq
		return
	fi
	svn log $path | grep ^issue | cut -d\  -f2 | cut -d\: -f1 | sort | uniq | $TRACKERS/issues/sh/issue -l | head $*
}


