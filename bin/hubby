#! /bin/bash

_show_status ()
{
    dir=$1
    local GIT="git -C $dir"
    owner=$($GIT remote show origin | grep Fetch.URL | cut -d\/ -f 4)
    local local_changes=$($GIT status -s)
    local dir_shown=
    if [[ -n $local_changes ]]
    then
        echo -e ${PROMPT_LIGHT_GREEN}${dir}${PROMPT_NO_COLOUR}
        dir_shown=1
        $GIT status -s
    fi
    local remote_changes=$($GIT log --no-color --oneline origin/master --ancestry-path HEAD..origin/master)
    if [[ -z $remote_changes ]]
    then remote_changes=$($GIT fetch --dry-run 2>&1)
    fi
    if [[ -n $remote_changes ]]
    then
        if [[ -z $dir_shown ]]
        then
            echo -e ${PROMPT_LIGHT_GREEN}${dir}${PROMPT_NO_COLOUR}
            dir_shown=1
        else
            echo
        fi
        if [[ $owner == "jalanb" ]]
        then
            $GIT fetch -q
            $GIT lg origin/master --ancestry-path HEAD..origin/master
        else
            $GIT pull --rebase
        fi
    fi
    test -z $dir_shown || echo
    if [[ -n $dir_shown ]]
    then echo
    fi
}

_show_dir ()
{
    path=$1
    if [[ -d $path/.git ]]
    then
        if [[ ! -f $path/.hubignore ]]
        then _show_status $path
        fi
    else echo Path has no git repo: $path
    fi
}

_show_dirs ()
{
    local hub=$1
    cd $hub
    for dirname in $(ls)
    do
        local path=$hub/$dirname
        [[ $(readlink -f $path) == $(readlink -f $JAB) ]] && continue
        if [[ -d $path ]]
        then
            _show_dir $path
        fi
    done
}

main ()
{
    if [[ -n $* ]]
    then _show_dir "$@"
    else
        _show_status $JAB
        if [[ -d ~/src/git/hub ]]
        then _show_dirs ~/src/git/hub
        fi
    fi
}

main "$@"
