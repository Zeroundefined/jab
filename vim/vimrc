" vim:fdm=marker

" My stuff
"
" Keyboard {{{1
"
" function keys {{{2
"
 noremap  <F1>      :help<cr>
 noremap  <F2>      :map <F2> 
 noremap  <F3>      :map <F3> 
 noremap  <F4>      <c-w>w
 noremap  <F5>      <C-W>_
 noremap  <F6>      :map <F6> 
 noremap  <F7>      :map <F7> 
 noremap  <F8>      :set list!<CR>
 noremap  <F9>      :w!<CR>:Limelight<cr>
inoremap  <F9>      <esc>:w!<CR>
 noremap <F10>      :map <F10> 
 noremap <F11>      :map <F11> 
 noremap <F12>      :map <F12> 

 noremap <S-F4>     <C-W>p
nnoremap <C-F4>     <C-W>c

 noremap <S-F5>     <C-W>=
"
" ordinary keys {{{2
"
" letters {{{3
"
"noremap a - append
"noremap b - backword
"noremap c - start cutting
"noremap d - delete
"noremap e - to end of word
"noremap f - seek key
"noremap g - many actions
"noremap h - go left
"noremap i - insert
 noremap j jzz
 noremap k kzz
"noremap l - go right
"noremap m - mark
 noremap n nzzzv
"noremap o - open new line
"noremap p - paste
 noremap q :q<CR>
"noremap r - change one char
"noremap s - start replacing
"noremap t - used by ftplugin/python/jab.vim
"noremap u - undo
"noremap v - start visual
"noremap w - forword
"noremap x - remove char
"noremap y - yank
 noremap yb byw
"noremap z - folds. centering, ...
 noremap z<up> zM
 noremap z<right> zr
 noremap z<left> zm
 noremap z<down> zR
 noremap z+ zO
 noremap z= zo
 noremap z- zc
 noremap z_ zC
 noremap zn nzMzv
 noremap zN NzMzv
 noremap z/ /<cr>zMzv
 noremap z? ?<cr>zMzv
"
" Punctuation {{{3
"
"noremap =
 noremap ] <C-]>   " do this on bufenter
 noremap [ <C-T>   " do this on bufenter
 noremap ; :
 noremap ' @a " play register a
 noremap '' "ap
"noremap \ - leader
 noremap , `
"noremap . - repeat
"noremap / - search
"noremap `
"
" Shifted punctuation {{{3
"
"noremap {
"noremap }
"noremap : - command line
"noremap "
"noremap |
"noremap < - 
"noremap > - 
"noremap ? - 
"noremap ~ - 
"noremap !
"noremap @
"noremap L
"noremap $ - 
"noremap %
"noremap ^
"noremap &
"noremap * - 
"noremap (
"noremap )
"noremap _
"noremap +
"
" LETTERS {{{3
"
"noremap A - Append
"noremap B - WORDS backwards
"noremap C c$
"noremap D d$
"noremap E e
"noremap F f backwards
"noremap G goto line (default last)
"noremap H
"noremap I - Insert
"noremap J - Join lines
nnoremap K <PageUp>zz
"noremap L - To Line <n> from bottom of window
"noremap M - To Middle of window
 noremap N :cn<cr>zzzv
"noremap O - Open line above
"noremap P - paste forward
 noremap Q :qa!<CR>
"noremap R - Replace
 noremap S :%s///<Left><Left>
 noremap T :!tags
 noremap U :redo<cr>
"noremap V
 noremap W :wa!<CR>
 noremap X :x!<CR>
"noremap Y - aka yy
 noremap Z :q!<cr>
"
" ordinary keys for movement {{{2
"
noremap <Space><Space>  <PageDown>zz
noremap <BS>     <PageUp>zz
noremap t<left>  :tabprev<cr>
noremap t<right> :tabnext<cr>
noremap th       :tabprev<cr>
noremap tl       :tabnext<cr>
"noremap <Up>     ddkP
"noremap <Down>   ddp
noremap <PageUp>   37kzz
noremap <PageDown> 37jzz
noremap <left>      :tabprev<cr>
noremap <right>     :tabnext<cr>
"
" control keys {{{2
"
 noremap     <C-d> :qa<CR>
 noremap     <C-n> :next<CR>
 noremap     <C-p> :prev<CR>
 noremap     <C-q> :qa!<CR>
 noremap     <C-h> <c-w><c-h>
 noremap     <C-j> <c-w><c-j>
 noremap     <C-k> <c-w><c-k>
 noremap     <C-l> <c-w><c-l>
 noremap <C-Right> w
 noremap <C-Left>  b
inoremap     <C-d> <esc>:qa<CR>
inoremap     <C-q> <Esc>:qa!<CR>
inoremap <C-Right> <Esc>lwi
inoremap <C-Left>  <Esc>bi
"
" Alt keys {{{2
"
 noremap     <A-q>      :qa!<CR>
 noremap <A-Right>      :tabnext<Cr>
 noremap  <A-Left>      :tabprev<Cr>
inoremap     <A-q> <Esc>:qa!<CR>
inoremap <A-Right> <Esc>:tabnext<CR>
inoremap  <A-Left> <Esc>:tabprev<CR>
"
" Leader keys {{{2
"
 noremap <leader>a :call SetAbsoluteNumber()<cr>
"noremap <leader>b used by plugin/EasyMotion.vim
"noremap <leader>c 
"noremap <leader>d 
"noremap <leader>e used by plugin/EasyMotion.vim
"noremap <leader>f used by plugin/EasyMotion.vim
"noremap <leader>g 
"noremap <leader>h
"noremap <leader>i
"noremap <leader>j used by plugin/EasyMotion.vim
"noremap <leader>k used by plugin/EasyMotion.vim
"noremap <leader>l
"noremap <leader>m
 noremap <leader>n :call ChangeNumber()<cr>
"noremap <leader>o
 noremap <leader>p :set paste<cr>
 noremap <leader>q :qa!<cr>
 noremap <leader>r :call SetRelativeNumber()<cr>
"noremap <leader>s
 noremap <leader>t :call RetabAndStripTrailingWhitespace()<CR> 
"noremap <leader>u
 noremap <leader>v mvO<c-r>. = <c-r>"<esc>`v
 noremap <leader>w :w<cr>
"noremap <leader>x
"noremap <leader>y
"noremap <leader>z

 noremap <leader>P :set ft=python<cr>
 noremap <leader>W :w !sudo tee % >/dev/null<cr>

 noremap <leader>] :cn<cr>zzzv
 noremap <leader>[ :cp<cr>zzzv
 noremap <leader>: q:
nnoremap <silent> <leader>/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>
 noremap <leader>\ :call ToggleHighlightSearch()<cr><c-l>
 noremap <leader><Left>     <<
 noremap <leader><Right>    >>
"
" Kinda keys {{{1
"
set backspace=eol,start,indent
set autoindent smartindent
set matchpairs+=<:>
set listchars=tab:>-,trail:?,eol:$
set tildeop
set whichwrap+=<,>,h,l,[,] " http://vim.wikia.com/wiki/Automatically_wrap_left_and_right
" Suggested by ZeroKelvinKeyboard (which must hurt ?!) http://stackoverflow.com/a/26235811/500942
set mouse=
" Mouse works: set mouse=
"
" Screen {{{1
"
set background=dark
colorscheme alan-colour
let g:SeeTabGuiFG="Cyan"
set title
set showmode " If in Insert, Replace or Visual mode put a message on the last line.
set showcmd  " Show (partial) command in the last line of the screen.
set nowrap
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set tabpagemax=1000
set nospell
"
" Terminal {{{2
"
" Enable screen swapping {{{3
" which seems missing in the linux terminfo entry
" help xterm-screens for more info
if &term == "linux"
    set t_ti=[?1049h
    set t_te=[?1049l
endif
"
" Colours {{{3
"
set t_Co=256
"
" Cusror shapes differing in different modes {{{3
" from http://www.reddit.com/user/Eyckelboom
" " set a nicer cursor in insert mode (from terryma on github)
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
"
" Plugins {{{1
"
" Pathogen {{{2
"
" Pathogen helps install other vim scipts, see http://github.com/tpope/vim-pathogen
" And it must be set up before the plugin on command (next)
"
call pathogen#infect() 
call pathogen#helptags()
filetype on
filetype plugin on
filetype indent on
"
"EasyMotion {{{2
"
let g:EasyMotion_keys = ' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
let g:EasyMotion_leader_key = '<Space>'
"
" Tagging plugins {{{2
"
let g:easytags_auto_highlight = 0
"
" pylint {{{2
"
let g:pylint_show_rate = 0                                                                                                     
"
" Limelight {{{2
"
let g:limelight_default_coefficient = 0.7
" YouCompleteMe {{{2
"
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
"
" vimdiff, aka vim -d {{{1
"
function EnterBuffer ()
    "
    " diff options
    "
    if &diff
        noremap <buffer> o :diffget<cr>
        noremap <buffer> p :diffput<cr>
        noremap <buffer> ] ]czz
        noremap <buffer> [ [czz
        syntax off
        set diffopt=filler  ",iwhite
        function! DiffNoSpace()
            set diffopt=filler,iwhite
        endfunction
        function! DiffSpace()
            set diffopt=filler
        endfunction
    else
        " noremap ] <C-]>
        " noremap [ <C-T>
        syntax on
    endif
    let &titlestring = $HOSTNAME . ":vim " . expand("%:p:~")
endfunction

function! LeaveBuffer ()
    let &titlestring = $HOSTNAME . ":not " . expand("%:p:~")
endfunction

autocmd BufEnter * call EnterBuffer()
autocmd BufLeave * call LeaveBuffer()

"
" diff to when I started editting
"
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
endif
"
" Ok, ok, so I have some spelling blind-spots {{{1
"
abbreviate becuase because
abbreviate seperate separate
"
" Some miscellaneous stuff from around the interwebs {{{1
"
autocmd FileType c,cpp,h,java set cindent
"
" From http://items.sjbach.com/319/configuring-vim-right {{{2
"
set hidden      " When on a buffer becomes hidden when it is abandoned.
set scrolloff=3 " Minimal number of screen lines to keep above and below the cursor.
set ruler
set shortmess=atI
set visualbell
"
" From http://www.pixelbeat.org/settings/.vimrc {{{2
"
set nojoinspaces    " Do not insert two spaces after a '.', '?' and '!' with a join command.
set cursorline      " Highlight the screen line of the cursor with CursorLine
set wildmenu
set wildmode=list:longest,full
"
" Ignorance {{{2
"Ignore these files when completing names and in Explorer
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,*.py[co]
"
" From http://tim.theenchanter.com/2008/07/crontab-temp-file-must-be-edited-in.html {{{2
"   When one of the patterns matches with the name of the file which is written, no backup file is created.
"
set backupskip=/tmp/*,/private/tmp/*,~/temp
"
" Stronger encryption {{{2
"
if exists('+cm')
    set cm=blowfish
endif
autocmd BufReadPost * if &key != "" | set noswapfile nowritebackup viminfo= nobackup noshelltemp history=0 secure | endif
"
" Despacing {{{2
"
function! RetabAndStripTrailingWhitespace()
    :retab!
    :%s/\s\+$//e
endfunction

"
" Showing numbers in left-hand gutter {{{2
"
" <leader>n is bound (above) to ChangeNumber()
"
function! SetRelativeNumber() " {{{3
    if exists('&relativenumber') && (&relativenumber == 0)
        set relativenumber
    endif
endfunction

function! SetAbsoluteNumber() " {{{3
    set number
endfunction

function! ChangeNumber() " {{{3
    if exists('&relativenumber')
        call CycleNumber()
    else
        call ToggleNumber()
    endif
endfunction

function! ToggleNumber() " {{{3
    if &number == 1
        set nonumber
    else
        set number
    endif
endfunc

function CycleNumber() " {{{3
    " There are (logically) 4 states to cycle between
    " both off: set number on, relative off
    " number on, relative off: set number off, relative on
    " number off, relative on: set number on, relative on
    " both on: set both off
    " However, when setting one on, vim sets the other off
    "   so both on is not actually possible, so:
    " both off: set number on, relative off
    " number on, relative off: set number off, relative on
    " number off, relative on: set both off
    if &number == 0 && &relativenumber == 0
        set number norelativenumber
    elseif &number == 1 && &relativenumber == 0
        set nonumber relativenumber
    elseif &number == 0 && &relativenumber == 1
        set nonumber norelativenumber
    endif
endfunction
"
" Start without 'em, as they are now so easy to turn on
"
set nonumber
"
" Search {{{2
" 
" Today's tip is from /u/dddbbb at http://www.reddit.com/r/vim/comments/2h5xce/vim_greplikes/ckpsxci
:set grepprg=grep\ -nH
"
" <leader>\ is bound to calling ToggleHighlightSearch
"   The leader key is also \, so really \\ calls this
"
function ToggleHighlightSearch()
    if &hlsearch
        set nohlsearch
    else
        set hlsearch
    endif
endfunction
set ignorecase
set smartcase
set incsearch
set hlsearch
"
" seek.vim is a plugin for 'in current line' searching
"
let g:SeekKey = 'f' 
let g:SeekBackKey = 'F'
"
" This looks like one of mine
"
function! ReadTraceback(filename)
    :set efm=%E\ \ File\ \"%f\"\\,\ line\ %l%.%#,%C\ \ \ \ %m,%Z
    :map <F11> :cn<cr>zzzv
    :map <F10> :cp<cr>zvzz
    exec "cf " . a:filename
    exec "clast"
    normal zv
endfunction
"
" History {{{2
"
set history=1000
set viminfo=/100,'10,r/mnt/zip,r/mnt/floppy,f0,h,\"100,n~/.viminfo
"
" for filename completion (with Tab) {{{2
"
let g:explHideFiles='^\.[^\.],\.gz$,\.exe$,\.zip$,\.py.$,\~$'
let g:explVertical=1
let g:explWinSize=1
let g:explSplitRight=1
let g:explDetailedList=1
let g:explSortBy='date'

let g:netrw_altv = 1
let g:netrw_browse_split = 2
let g:netrw_list_hide='^\.[^\.],\.gz\([^\i]\|$\),\.exe\([^\i]\|$\),\.zip\([^\i]\|$\),\.py[oce],\~\([^\i]\|$\)'
let g:netrw_keepdir=0
let g:netrw_banner = 0

let g:jabHideFiles='^\.[^\.],\.gz$,\.exe$,\.zip$,\.py.$,\~$'
let g:jabVertical=1
let g:jabWinSize=1
let g:jabSplitRight=1
let g:jabDetailedList=1
let g:jabSortBy='date'

let g:is_posix = 1

" Honour those wee lines at eof {{{2
set modeline
set modelines=1
