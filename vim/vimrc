set t_Co=256
" My stuff
"

" Behave like on Windows
"
"
" Keyboard
"
" function keys 
"
 noremap  <F1>      :help<cr>
"noremap  <F2>
"noremap  <F3>
 noremap  <F4>       <c-w>W
"noremap  <F5>
"noremap  <F6>
"noremap  <F7>
 noremap  <F8>      :SeeTab<CR>
 noremap  <F9>      :w!<CR>
"noremap <F10>
 noremap <F11>      :map <F11> 
 noremap <F12>      :map <F12> 

 noremap <S-F4> <C-W>P
nnoremap <C-F4> <C-W>c
"
" ordinary keys 
"
" letters
"
"noremap a - append
"noremap b - backword
"noremap c - start cutting
"noremap d - delete
"noremap e - to end of word
"noremap f - seek key
"noremap g - many actions
"noremap h - go left
"noremap i - insert
 noremap j jzz
 noremap k kzz
"noremap l - go right
"noremap m - mark
 noremap n nzzzv
"noremap o - open new line
"noremap p - paste
 noremap q :q<CR>
"noremap r - change one char
"noremap s - start replacing
"noremap t - used by ftplugin/python/jab.vim
"noremap u - undo
"noremap v - start visual
"noremap w - forword
"noremap x - remove char
"noremap y - yank
 noremap yb byw
"noremap z - folds. centering, ...
 noremap z<up> zM
 noremap z<right> zr
 noremap z<left> zm
 noremap z<down> zR
 noremap z+ zO
 noremap z= zo
 noremap z- zc
 noremap z_ zC
"
" Punctuation
"
"noremap =
 noremap ] <C-]>   " do this on bufenter
 noremap [ <C-T>   " do this on bufenter
 noremap ; :
 noremap ' @a " play register a
 noremap '' "ap
"noremap \ - leader
 noremap , `
"noremap . - repeat
"noremap / - search
"noremap `
"
" Shifted punctuation
"
"noremap {
"noremap }
"noremap : - command line
"noremap "
"noremap |
"noremap < - 
"noremap > - 
"noremap ? - 
"noremap ~ - 
"noremap !
"noremap @
"noremap L
"noremap $ - 
"noremap %
"noremap ^
"noremap &
"noremap * - 
"noremap (
"noremap )
"noremap _
"noremap +
"
" LETTERS
"
"noremap A - Append
"noremap B - WORDS backwards
"noremap C c$
"noremap D d$
"noremap E e
"noremap F f backwards
"noremap G goto line (default last)
"noremap H
"noremap I - Insert
"noremap J - Join lines
nnoremap K <PageUp>zz
"noremap L - To Line <n> from bottom of window
"noremap M - To Middle of window
 noremap N :cn<cr>zzzv
"noremap O - Open line above
"noremap P - paste forward
 noremap Q :qa!<CR>
"noremap R - Replace
"noremap S - aka cc
 noremap T :!tags
 noremap U :redo<cr>
"noremap V
 noremap W :wa!<CR>
 noremap X :x!<CR>
"noremap Y - aka yy
 noremap Z :q!<cr>
"
" ordinary keys 
"     for movement
"
noremap <Space><Space>  <PageDown>zz
noremap <BS>     <PageUp>zz
noremap t<left>  :tabprev<cr>
noremap t<right> :tabnext<cr>
noremap th       :tabprev<cr>
noremap tl       :tabnext<cr>
noremap <S-Tab>  :SeeTab<cr>
noremap <Up> 	 ddkP
noremap <Down>	 ddp
noremap <left>      :tabprev<cr>
noremap <right>     :tabnext<cr>
"
" control keys
"
 noremap     <C-d> :qa<CR>
 noremap     <C-n> :next<CR>
 noremap     <C-p> :prev<CR>
 noremap     <C-q> :qa!<CR>
 noremap     <C-h> <c-w><c-h>
 noremap     <C-j> <c-w><c-j>
 noremap     <C-k> <c-w><c-k>
 noremap     <C-l> <c-w><c-l>
 noremap <C-Right> w
 noremap <C-Left>  b
inoremap     <C-d> <esc>:qa<CR>
inoremap     <C-q> <Esc>:qa!<CR>
inoremap <C-Right> <Esc>lwi
inoremap <C-Left>  <Esc>bi
"
" Alt keys
"
 noremap     <A-q>      :qa!<CR>
 noremap <A-Right>      :tabnext<Cr>
 noremap  <A-Left>      :tabprev<Cr>
inoremap     <A-q> <Esc>:qa!<CR>
inoremap <A-Right> <Esc>:tabnext<CR>
inoremap  <A-Left> <Esc>:tabprev<CR>
"
" Leader keys
"
 noremap <leader>a :call SetAbsoluteNumber()<cr>
"noremap <leader>b used by plugin/EasyMotion.vim
"noremap <leader>c 
"noremap <leader>C 
"noremap <leader>d 
"noremap <leader>D 
"noremap <leader>e used by plugin/EasyMotion.vim
"noremap <leader>f used by plugin/EasyMotion.vim
"noremap <leader>g 
"noremap <leader>h
"noremap <leader>i
"noremap <leader>j used by plugin/EasyMotion.vim
"noremap <leader>k used by plugin/EasyMotion.vim
"noremap <leader>l
"noremap <leader>m
 noremap <leader>n :call ChangeNumber()<cr>
"noremap <leader>o
 noremap <leader>p :set paste<cr>
"noremap <leader>q
 noremap <leader>r :call SetRelativeNumber()<cr>
 noremap <leader>s :w !sudo tee % >/dev/null<cr>
 noremap <leader>t :call RetabAndStripTrailingWhitespace()<CR> 
"noremap <leader>u
"noremap <leader>v
"noremap <leader>w used by plugin/EasyMotion.vim
"noremap <leader>x
"noremap <leader>y
"noremap <leader>z

 noremap <leader>] :cn<cr>zzzv
 noremap <leader>[ :cp<cr>zzzv
nnoremap <silent> <leader>/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>
 noremap <leader>\ :call ToggleHighlightSearch()<cr><c-l>
 noremap <leader><Left>		<<
 noremap <leader><Right>	>>
"
" Kinda keys
"
set backspace=eol,start,indent
set autoindent smartindent
set matchpairs+=<:>
set listchars=tab:>-,trail:?,eol:$
set tildeop
"
" Screen
"
set background=dark
colorscheme alan-colour
let g:SeeTabGuiFG="Cyan"
set title
set showmode " If in Insert, Replace or Visual mode put a message on the last line.
set showcmd  " Show (partial) command in the last line of the screen.
set nowrap
set ts=4
set shiftwidth=4
set noexpandtab
set nospell
"
" Pathogen helps install other vim scipts, see http://github.com/tpope/vim-pathogen
" And it must be set up before the plugin on command (next)
"
call pathogen#infect() 
call pathogen#helptags()
filetype on
filetype plugin on
filetype indent on

"
" Auto-completion plugins
"

"
" vimdiff, aka vim -d
"
function EnterBuffer ()
	"
	" diff options
	"
	if &diff
		noremap <buffer> o :diffget<cr>
		noremap <buffer> p :diffput<cr>
		noremap <buffer> ] ]czz
		noremap <buffer> [ [czz
		syntax off
		set diffopt=filler  ",iwhite
		function! DiffNoSpace()
			set diffopt=filler,iwhite
		endfunction
		function! DiffSpace()
			set diffopt=filler
		endfunction
	else
		" noremap ] <C-]>
		" noremap [ <C-T>
		syntax on
	endif
	let &titlestring = $HOSTNAME . ":vim " . expand("%:p:~")
endfunction

function! LeaveBuffer ()
	let &titlestring = $HOSTNAME . ":not " . expand("%:p:~")
endfunction

autocmd BufEnter * call EnterBuffer()
autocmd BufLeave * call LeaveBuffer()

"
" diff to when I started editting
"
if !exists(":DiffOrig")
	command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
endif
"
" Svn diff
"
function! SvnPatchExpr()
   :call system("patch -R -o " . v:fname_out . " " . v:fname_in . " < " . v:fname_diff )
endfunction

function! Diff2PatchHorizontal(filename)
	let l:orig_patchexpr = &patchexpr
	set patchexpr=SvnPatchExpr() 
	silent exec ":diffpatch " . a:filename . '.patch'
	let &patchexpr = l:orig_patchexpr
endfunction

function! Diff2PatchVertical(filename)
	let l:orig_patchexpr = &patchexpr
	set patchexpr=SvnPatchExpr() 
	silent exec ":vertical diffpatch " . a:filename . '.patch'
	let &patchexpr = l:orig_patchexpr
endfunction
"
" Ok, ok, so I have some spelling blind-spots:
"
abbreviate becuase because
abbreviate seperate separate
"
" Miscellaneous
"
autocmd FileType c,cpp,h,java set cindent
autocmd FileType python compiler pylint

"
" PyMode (no longer using this one)
"
" let g:pymode_lint_config = "$HOME/.pylintrc"

"
" pylint
"
let g:pylint_show_rate = 0                                                                                                     
"
" Showing numbers in left-hand gutter
"
" <leader>n is bound (above) to ToggleNumber()
"
function! SetRelativeNumber()
	if exists('&relativenumber') && (&relativenumber == 0)
		set relativenumber
	endif
endfunction

function! SetAbsoluteNumber()
	set number
endfunction

function! ChangeNumber()
	if exists('&relativenumber')
		call CycleNumber()
	else
		call ToggleNumber()
	endif
endfunction

function! ToggleNumber()
	if &number == 1
		set nonumber
	else
		set number
	endif
endfunc

function CycleNumber()
	if &number == 1
		set relativenumber
	else
		if &relativenumber == 1
			set nonumber
			set norelativenumber
		else
			set number
		endif
	endif
endfunction

set number
"
" <leader>\ is bound to calling this
" 	The leader key is also \, so really \\ calls this
"
function ToggleHighlightSearch()
	if &hlsearch
		set nohlsearch
	else
		set hlsearch
	endif
endfunction
"
" Some miscellaneous stuff from around the interwebs
"
" From http://items.sjbach.com/319/configuring-vim-right
"
set hidden		" When on a buffer becomes hidden when it is abandoned.
set scrolloff=3	" Minimal number of screen lines to keep above and below the cursor.
set ruler
set shortmess=atI
set visualbell
"
" From http://www.pixelbeat.org/settings/.vimrc
"
set nojoinspaces	" Do not insert two spaces after a '.', '?' and '!' with a join command.
set cursorline		" Highlight the screen line of the cursor with CursorLine
set wildmenu
set wildmode=list:longest,full
"Ignore these files when completing names and in Explorer
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,*.py[co]
"
" From http://tim.theenchanter.com/2008/07/crontab-temp-file-must-be-edited-in.html
"	When one of the patterns matches with the name of the file which is written, no backup file is created.
"
set backupskip=/tmp/*,/private/tmp/*,~/temp
"
" https://github.com/dougireton/vimfiles/blob/master/vimrc
"
set clipboard=unnamed " Yank to the system clipboard by default
"
" for searching
"
set ignorecase
set smartcase
set incsearch
set hlsearch
"
" seek.vim is a plugin for 'in current line' searching
"
let g:SeekKey = 'f' 
let g:SeekBackKey = 'F'
"
" for Tab Completion
"	from vim's help
"
"function! CleverTab()
   "if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
      "return "\<Tab>"
   "else
      "return "\<C-N>"
"endfunction
"
" and if we need a Tab in the middle of a line: use <S-Tab>
"
function! RetabAndStripTrailingWhitespace()
	:retab!
	:%s/\s\+$//e
endfunction
"
" This lloks like one of mine
"
function! ReadTraceback(filename)
	:set efm=%E\ \ File\ \"%f\"\\,\ line\ %l%.%#,%C\ \ \ \ %m,%Z
	:map <F11> :cn<cr>zzzv
	:map <F10> :cp<cr>zvzz
	exec "cf " . a:filename
	exec "clast"
	normal zv
endfunction
"
" for history
"
set history=1000
set viminfo=/100,'10,r/mnt/zip,r/mnt/floppy,f0,h,\"100,n~/.viminfo
"
" for filename completion (with Tab)
"
let g:explHideFiles='^\.[^\.],\.gz$,\.exe$,\.zip$,\.py.$,\~$'
let g:explVertical=1
let g:explWinSize=1
let g:explSplitRight=1
let g:explDetailedList=1
let g:explSortBy='date'

let g:netrw_altv = 1
let g:netrw_browse_split = 2
let g:netrw_list_hide='^\.[^\.],\.gz\([^\i]\|$\),\.exe\([^\i]\|$\),\.zip\([^\i]\|$\),\.py[oce],\~\([^\i]\|$\)'
let g:netrw_keepdir=0

let g:jabHideFiles='^\.[^\.],\.gz$,\.exe$,\.zip$,\.py.$,\~$'
let g:jabVertical=1
let g:jabWinSize=1
let g:jabSplitRight=1
let g:jabDetailedList=1
let g:jabSortBy='date'

let g:is_posix = 1

" au InsertEnter * set paste
" au InsertLeave * set nopaste

" Honour those wee lines at eof
set modeline
set modelines=1

" Enable screen swapping, which seems missing in the linux terminfo entry
" help xterm-screens for more info
if &term == "linux"
	set t_ti=[?1049h
	set t_te=[?1049l
endif

"
"EasyMotion
"
let g:EasyMotion_keys = ' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
let g:EasyMotion_leader_key = '<Space>'
"
" Python Mode
"
let g:pymode_folding = 0
let g:pymode_syntax = 0
let g:pymode_syntax_all = 0
let g:pymode_options_indent = 0
